@startuml

PatternRankingModel <|-- sklearn.base.BaseEstimator

class Stats {
{method} aibolit_stat(test_csv: pd.DataFrame, model=None)
{method} count_acts(acts: np.array, ranked: np.array)
{method} get_patterns_name()
{method} get_table(features_conf: Dict[Any, Any], m: np.array, p: np.array, acts_complexity)
{method} split_dataset_by_pattern_value(X: np.array, pattern_idx: int)
{method} change_matrix_by_value(arr: np.array, mask: np.array, i: int, incr: np.array)
{method} check_impact(X: np.array, model_input: Any)
}

class PatternRankingModel{
{field} bool: do_rename_columns
{field} CatBoost: model
{field} Dict[Any, Any] features_conf

{method} fit_regressor(self, X, y, display=False)
{method} sigmoid(self, x)
{method} __get_pairs(self, item, th: float, feature_importances=None)
{method} __vstack_arrays(self, res):
{method} calculate_score(self, X, quantity_func='log', th=1.0, feature_importances=None)
{method} rank(self, snippet, scale=True, th=1
get_minimum(c1: np.array, c2: np.array, c3: np.array)
generate_fake_dataset()
scale_dataset(df: pd.DataFrame, features_conf: Dict[Any, Any], scale_ncss=True)


}



@enduml